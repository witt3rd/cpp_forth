//-*- mode: Pascal; -*-

macro N 100 end

mem N 2 - + 1 .

0 while dup N 2 - < do
  0 while dup N < do
    dup mem + , if
      dup mem + N + '*' .
    else
      dup mem + N + ' ' .
    end
    1 +
  end
  mem + N + '\n' .
  N 1 + mem N + 1 1 syscall3

  // pattern =
  mem     , 1 shl // mem[0] << 1
  mem 1 + ,       // mem[1]
  bor             // mem[0] | mem[1]

  1 while dup N 2 - < do        // index
     swap 1 shl 7 band          // ((pattern << 1) & 7)
     over mem + 1 + , bor       // | (mem[index + 1]) = new_pattern
     2dup 110 swap shr 1 band   // ((110 >> new_pattern) & 1)
     swap mem + swap .
     swap

     1 +
  end
  drop
  drop

  1 +
end
drop
